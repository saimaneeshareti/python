Exercise : Set 1 
----------------

Define a list of 10 elements. From the list pick all numbers that are > er 100. Add those numbers to new list. Finally print the new list.

Define a dictionary with 10 keys. Multiply each key by 10, each value by 5. Finally iterate and Print the new dict.

Define a dictionary with 10 keys. If the dict key is > 10, then add it to new dict. Finally iterate and print the new dict.

Define a list of 10 elements. If the element is even then multiply that element by 100, if the element is odd then multiply that element by 200. Finally print the new list.

Define a list of 10 elements. From the list pick the elements that are not divisible by 5. Add those elements to new list. Finally print the new list.

Define a list of 10 elements. From the list pick the elements that are not divisible by 5 and 3. Add those elements to new list. Finally print the new list.

From the list pick the elements that are not ODD. Add those elements to new list. Finally print the new list.

From the list pick the elements that are not EVEN. Add those elements to new list. Finally print the new list.

--------------------------------------------------------------------------------------------------------------------------------

Exercise : Set 2
----------------

Write a function to take a list and a number X as arguments. From the list pick all numbers that are > er number X. Add those numbers to new list. Finally return the new list.

Write a function to take a dict as an argument. Multiply each key by 10, each value by 5. Finally iterate and return the new dict.

Write a function to take a dict, number X and number Y as arguments. Multiply each key by number X, each value by number Y. Finally iterate and return the new dict.

Write a function to take a dict, number X as arguments. If the dict key is > number X, then add it to new dict. Finally iterate and return the new dict.

Write a function to take a list as an argument. If the element is even then multiply that element by 100, if the element is odd then multiply that element by 200. Finally return the new list.

Write a function to take a list, number X, number Y as arguments. If the element is even then multiply that element by number X, if the element is odd then multiply that element by number Y. Finally return the new list.

Write a function to take a list as an argument. From the list pick the elements that are not divisible by 5. Add those elements to new list. Finally return the new list.

Write a function to take a list, number X as arguments. From the list pick the elements that are not divisible by number X. Add those elements to new list. Finally return the new list.

Write a function to take a list, number X,Y as arguments. From the list pick the elements that are >er than (X+Y). Add those elements to new list. Finally return the new list.

Write a function to take a list, number X,Y,Z as arguments. From the list pick the elements that are >er than (X*Y*Z). Add those elements to new list. Finally return the new list.

Write a function to take a dict, number X,Y as arguments. If the sum of (dict key + dict val) is > sum of number (X+Y), then add it to new dict. Finally iterate and return the new dict.

--------------------------------------------------------------------------------------------------------------------------------

Exercise Set 3 :
----------------

	*** Note: Time for each problem is 10 mins only. ***

1. Write a function to take a list as an argument. Remove all duplicates from the list. Don't use any built-in. Check using if conditions.

	Example : 
		listA=[1,2,3,4,5,6,7,8,9,10,11,12,1,1,2,4,4,5,6,7]
		result=func_exec(listA)
		print(result)
		Expected Output : [1,2,3,4,5,6,7,8,9,10,11,12]

2. Write a function to take a dict as an argument. Find the key that has maximum value and return the key.

	Example : 
		testDict={1:4,10:100,3:90,4:40,6:80,12:200}
		result=func_exec(testDict)
		print(result)
		Expected Output : 12
		Reason: Output is 12 since 12 has value of 200 which is greater than other values

3. Write a function to take a list, number X,Y,Z as arguments. From the list pick the elements that are >er than (X+Y+Z). Add those elements to new list. Finally return the new list.

	Example : 
		listA=[1,2,300,4,5,6,7,8,9,100,11,120,200,400]
		numX=10
		numy=20
		numZ=25

		result=func_exec(listA,numX,numY,numZ)
		print(result)
		Expected Output : [300,100,120,200,400]

4. Write a function to take a list, number X,Y,Z as arguments. From the list pick the elements that are <er than (X+Y+Z). Add those elements to new list. Finally return the new list.

	Example : 
		listA=[1,2,300,4,5,6,7,8,9,100,11,120,200,400]
		numX=10
		numy=20
		numZ=25

		result=func_exec(listA,numX,numY,numZ)
		print(result)
		Expected Output : [1,2,4,5,6,7,8,9,11]

5. Write a function to take a dict, number X,Y as arguments. If the prod of (dict key * dict val) is > sum of number (X+Y), then add it to new dict. Finally iterate and return the new dict.

	Example : 
			testDict={1:4,10:2,3:4,4:7,6:11,12:9}
			numX=20
			numY=30

			result=func_exec(testDict,numX,numY)
			print(result)
			Expected Output : {6:11,12:9}}

--------------------------------------------------------------------------------------------------------------------------------

Exercise Set 4:
---------------

1. Write a function to take a list as an argument. Find the number that occurs the most number of times.

	Example : 

		listA=[1,2,300,4,5,6,7,2,8,9,10,100,11,2,200,10]
		result=func_exec(listA)
		print(result)
		Expected Output : {2:3} 
		Reason: Number 2 occurs 3 times in the list

		listA=[1,2,300,4,5,6,7,2,8,9,10,100,11,2,200,10,1,1]
		result=func_exec(listA)
		print(result)
		Expected Output : {2:3, 1:3} 
		Reason: Number 2 occurs 3 times in the list and number 1 also occurs 3 times

		listA=[1,2,300,4,5,6,7,10,11,21,80,900]
		result=func_exec(listA)
		print(result)
		Expected Output : "NULL"
		Reason: All numbers in the list occur exactly once, so result in "NULL"


2. Write a function to take a list as an argument. Find all the elements that occur in ODD indexes.

	Example : 

		listA=[1,2,300,4,5,6,7,2,8,9,10,100,11,2,200,10]
		result=func_exec(listA)
		print(result)
		Expected Output : [2,4,6,2,9,100,2,10]


3. Write a function to take a list as an argument. Find all the elements that occur in EVEN indexes &
   remove all duplicates.

	Example : 

		listA=[1,2,300,4,5,6,7,2,8,9,10,100,11,2,200,10,300]
		result=func_exec(listA)
		print(result)
		Expected Output : [1,300,5,7,8,19,11,200]

4. Write a function to take a dict and number X arguments. If the dict key is divisible by number X, then
   add the key to new dict and return the new dict.

	Example : 
			testDict={1:4,10:20,3:4,4:7,60:11,12:9}
			numX=10
			result=func_exec(testDict,numX)
			print(result)
			Expected Output : {10:20,60:11}

	Example : 
			testDict={1:4,10:20,3:4,4:7,60:11,12:9}
			numX=101
			result=func_exec(testDict,numX)
			print(result)
			Expected Output : {}

5. Write a function to take a dict and number X arguments. If the dict key is NOT divisible by number X, then
   add the key to new dict and finally return the new dict.

	Example : 
			testDict={1:4,10:20,3:4,4:7,60:11,12:9}
			numX=10
			result=func_exec(testDict,numX)
			print(result)
			Expected Output : {1:4,3:4,4:7,12:9}

	Example : 
			testDict={1:4,101:20,130:4,41:7,601:11,120:9}
			numX=5
			result=func_exec(testDict,numX)
			print(result)
			Expected Output : {1:4,101:20,41:7,601:11}

	Example : 
			testDict={1:4,101:20,130:4,41:7,601:11,120:9}
			numX=1
			result=func_exec(testDict,numX)
			print(result)
			Expected Output : {}

6. Write a function to take 2 lists. Iterate both the lists, if the elements in both the lists match then add it to new list.
   From that list select all elements in ODD indexes.Finally return the new list. The new list must not contain duplicates.

	Example :
		listA=[10,20,30,40,50,60,100]
		listB=[10,200,30,40,500,60,100,400,90]
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [30,100]

	Example :
		listA=[10,20,30,40,50,60,100]
		listB=[101,2001,130,140,1500,610,1100,4001,190,901]
		result=func_exec(listA,listB)
		print(result)
		Expected Output : []

--------------------------------------------------------------------------------------------------------------------------------

Exercise Set 5:
---------------

1. Write a function to take a list. Reverse and return the new list.

	Example :
		listA=[10,20,30,40,50,60,100]
		result=func_exec(listA)
		print(result)
		Expected Output : [100,60,50,40,30,20,10]


2. Write a function to take a list. Sort and return the new list.

	Example :
		listA=[100,20,300,40,50,60,100]
		result=func_exec(listA)
		print(result)
		Expected Output : [20,40,50,60,100,100,300]


3. Write a function to take 2 lists. Use zip function to iterate the list and pick values that
   are common at both indexes.

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		result=func_exec(listA,listB)
		print(result)
		# 20 -> listA[1] == listB[1]
		# 40 -> listA[3] == listB[3]
		# 50 -> listA[4] == listB[4]
		Expected Output : [20,40,50]

4. Write a function to take a dict as argument. Sort the dict by keys and return the dict.

	Example : 
			testDict={1:4,10:20,3:4,4:7,60:11,12:9}
			result=func_exec(testDict)
			print(result)
			Expected Output : {1:4,3:4,4:7,12:9,20:3,60:11}

5. Write a function to take a dict as argument. Sort the dict by values and return the dict.

	Example : 
			testDict={1:4,10:20,3:40,4:7,60:11,12:9}
			result=func_exec(testDict)
			print(result)
			Expected Output : {1:4,4:7,12:9,60:11,10:20,3:40}

--------------------------------------------------------------------------------------------------------------------------------

Exercise Set 6:
---------------

1. Write a function to take a list. Filter all the prime numbers, add to new list and return the new list.

	Example :
		listA=[10,20,30,40,50,60,100,11]
		result=func_exec(listA)
		print(result)
		Expected Output : [11]

	Example :
		listA=[10,20,23,30,40,50,60,100,11]
		result=func_exec(listA)
		print(result)
		Expected Output : [11,23]

2. Write a function to take a list. Select the number that is greater than sum of all other numbers.

	Example :
		listA=[1,2,13,4,5]
		result=func_exec(listA)
		print(result)
		Expected Output : 13
		Reason: 13 is greater than sum of [1,2,4,5] -> 12

	Example :
		listA=[100,20,300,40,1000,50,60,100]
		result=func_exec(listA)
		print(result)
		Expected Output : 1000
		Reason: 1000 is greater than sum of [100,20,300,40,50,60,100] -> 670

3. Write a function to take a list. Select the number that is greater than product of all other numbers.

	Example :
		listA=[1,2,30,4,2]
		result=func_exec(listA)
		print(result)
		Expected Output : 30
		Reason: 30 is greater than product of [1,2,4,2] -> 16

	Example :
		listA=[1,2,3,4,2]
		result=func_exec(listA)
		print(result)
		Expected Output : []

4. Write a function to take 2 lists and an integer X. Use zip function to iterate the list and pick values that
   are common at both indexes, they must be divisible by X. 
   *** Note: You must iterate the lists only if the lengths of the lists are equal. *** 
   -------------------------------------------------------------------------------------

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		numX=10
		result=func_exec(listA,listB)
		print(result)
		Expected Output : []

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[100,20,300,40,50,60,100]
		numX=20
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [100,20,300,40,50,60,100]

	Example :
		listA=[100,21,300,41,50,63,100]
		listB=[100,21,300,41,50,63,100]
		numX=10
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [100,300,50,100]

5. Write a function to take a dict and number X as argument. Find the key,value pairs that are both divisible by number X

	Example : 
			testDict={10:20, 3:30, 4:40,90:100,20:30}
			numX=10
			result=func_exec(testDict,numX)
			print(result)
			Expected Output : {10:20,90:100,20:30}

--------------------------------------------------------------------------------------------------------------------------------

Exercise Set 7:
---------------

1. Write a function to take a list. Filter all the even numbers from the ODD indexes. Remove duplicates.

	Example :
		listA=[10,20,30,40,50,60,100,11,12,13]
		result=func_exec(listA)
		print(result)
		Expected Output : [20,40,60]

	Example :
		listA=[10,21,30,41,50,50,100,11,12,13]
		result=func_exec(listA)
		print(result)
		Expected Output : [50]


2. Write a function to take a list, number Y as arguments. 
	Filter all the numbers from the EVEN indexes, divisible by number Y. Remove duplicates.

	Example :
		listA=[10,20,30,40,50,60,100,11,12,13]
		numY=10
		result=func_exec(listA,numY)
		print(result)
		Expected Output : [30,50,100]

	Example :
		listA=[10,21,301,41,501,50,1100,11,12,13]
		numY=10
		result=func_exec(listA,numY)
		print(result)
		Expected Output : [1100]

	Example :
		listA=[10,20,30,40,50,60,100,11,120,13,100]
		numY=10
		result=func_exec(listA,numY)
		print(result)
		Expected Output : [30,50,100,120]


3. Write a function to take a list. From the list find the number that occurs most number of times.

	Example :
		listA=[10,20,30,40,50,60,100,11,12,13]
		result=func_exec(listA)
		print(result)
		Expected Output : []

	Example :
		listA=[10,21,30,41,50,500,100,11,12,13,21]
		result=func_exec(listA)
		print(result)
		Expected Output : [21,]

	Example :
		listA=[10,21,30,41,50,50,100,11,12,13,21]
		result=func_exec(listA)
		print(result)
		Expected Output : [21,50]

--------------------------------------------------------------------------------------------------------------------------------

Exercise Set 8:
---------------

1. Write a function to take a list, numX, numY as arguments. 
	Filter all the numbers from the list that are >numX and <numY and add to new list.
	Finally return the new list.

	Example :
		listA=[10,20,30,40,50,60,100,11,12,13]
		numX=45
		numY=55
		result=func_exec(listA)
		print(result)
		Expected Output : [50]
		Reason: 50 is >er than numX 45 and <er than numY 55

	Example :
		listA=[10,20,30,46,52,60,54,11,12,13]
		numX=45
		numY=55
		result=func_exec(listA)
		print(result)
		Expected Output : [46,52,54]
		Reason: 46 is >er than numX 45 and <er than numY 55
		Reason: 52 is >er than numX 45 and <er than numY 55
		Reason: 54 is >er than numX 45 and <er than numY 55

	Example :
		listA=[10,20,30,46,52,60,54,11,12,13]
		numX=450
		numY=550
		result=func_exec(listA)
		print(result)
		Expected Output : []

2. Write a function to take a list argument. Find the elements that has greatest length.

	Example :
		listA=["hello","world","science","maths","Python"]
		result=func_exec(listA)
		print(result)
		Expected Output : ["science"]
		Reason: length of science -> 7

	Example :
		listA=["hello","world","science","maths","Pythonics"]
		result=func_exec(listA)
		print(result)
		Expected Output : ["Pythonics"]
		Reason: length of Pythonics -> 9

	Example :
		listA=["hello","world","today"]
		result=func_exec(listA)
		print(result)
		Expected Output : []
		Reason: All lengths are same.
		Length of hello -> 5
		Length of world -> 5
		Length of today -> 5

3. Write a function to take a dict as argument. If the dict-key and dict-val are both PRIME then filter, add to new dict.
   Finally return the new dict.

	Example : 
			testDict={10:20, 3:30, 4:40,90:100,20:30,11:23,17:44}
			result=func_exec(testDict)
			print(result)
			Expected Output : {11:23}

4. Write a function to take a dict as argument. If the dict-val is the divisible bydict-key then filter, add to new dict.
   Finally return the new dict.

	Example : 
			testDict={10:20, 3:30, 4:16,90:100,20:30,11:23,17:44,20:400}
			result=func_exec(testDict)
			print(result)
			Expected Output : {10:20,3:30,4:16,20:400}
			Reason: 
				20 is divisible by 10
				30 is divisible by 3
				16 is divisible by 4
				400 is divisible by 20

5. Write a function to take a dict as argument. Return the key that has max value.

	Example : 
			testDict={10:20, 3:30, 4:16,90:100,20:31,11:23,17:44,20:400}
			result=func_exec(testDict)
			print(result)
			Expected Output : {20:400}
			Reason:
				400 is > 20
				400 is > 30
				400 is > 16
				400 is > 100
				400 is > 31
				400 is > 23
				400 is > 44

6. Write a function to take 3 lists, numX, numY as arguments. 
  	If the sum of elements in the indexes is > er sum of numX + numY, then add to new list.
	Finally return the new list.

	Note: You must execute only if the lists are of same length.

	Example :
		listA=[10,20,30,40,50]
		listB=[1,2,3,4,5]
		listC=[100,150,200,250,300]
		numX=150
		numY=100
		result=func_exec(listA)
		print(result)
		Expected Output : [[40,4,250],[50,5,300]]
		Reason: 
			sum of (numX + numY) = 250
			-	sum of ([40,4,250]) is > er than sum of (numX + numY)
			-	sum of ([50,5,300]) is > er than sum of (numX + numY)

	Example :
		listA=[10,20,30,40,50]
		listB=[1,2,3,4,5]
		listC=[100,150,200,250,300]
		numX=50
		numY=100
		result=func_exec(listA)
		print(result)
		Expected Output : [[20,2,150], [30,3,200], [40,4,250],[50,5,300]]
		Reason:
			sum of (numX + numY) = 150 
			-	sum of ([20,2,150]) is > er than sum of (numX + numY)
			-	sum of ([30,3,200]) is > er than sum of (numX + numY)						
			-	sum of ([40,4,250]) is > er than sum of (numX + numY)
			-	sum of ([50,5,300]) is > er than sum of (numX + numY)

	Example :
		listA=[10,20,30,40,50]
		listB=[1,2,3,4,5]
		listC=[100,150,200,250,300]
		numX=500
		numY=100
		result=func_exec(listA)
		print(result)
		Expected Output : []
		Reason: 
		   sum of (numX + numY) = 600
		   Sum of values in the indexes are < 600

--------------------------------------------------------------------------------------------------------------------------------

Exercise Set 9:
---------------

1. Write a function to take a number numX followed by any number of integer arguments. 
	You need to find all numbers divisible by numX 
	Filter all the numbers from the list that are divisible numX and add to new list.
	Finally return the new list.

	Note: You must use *args in your function implementation
	*********************************************************

	Example :
		numX=20
		result=func_exec(numX,20,40,50,60,80,90,100,70)
		print(result)
		Expected Output : [20,40,60,80,100]

	Example :
		numX=25
		result=func_exec(numX,50,60,80,90,100,70)
		print(result)
		Expected Output : [50,100]

	Example :
		numX=7
		result=func_exec(numX,20,40,50,70)
		print(result)
		Expected Output : [70]


2. Write a function to take a number numX, numY followed by any number of integer arguments. 
	You need to find all numbers divisible by numX and numY
	Filter all the numbers from the list that are divisible numX and numY and add to new list.
	Finally return the new list.

	Note: You must use *args in your function implementation
	*********************************************************

	Example :
		numX=20
		numY=10
		result=func_exec(numX,20,40,50,60,80,90,100,70)
		print(result)
		Expected Output : [20,40,60,80,100]

	Example :
		numX=25
		numY=5		
		result=func_exec(numX,50,60,80,90,100,70)
		print(result)
		Expected Output : [50,100]

	Example :
		numX=7
		numY=12		
		result=func_exec(numX,20,40,50,70)
		print(result)
		Expected Output : []
-----------------------------------------------------------------------------------------------------

Exercise Set 10:
----------------

1. Write a function to take 2 lists and an integer numX. 
   Use zip function to iterate the list.
   Pick values if 
   		:they are common at both indexes AND 
   		:they ARE be divisible by numX. 
   
   Duration for Dev & Execution: 10 minutes
   -----------------------------------------

   *** Note: You must iterate the lists only if the lengths of the lists are equal. *** 
   -------------------------------------------------------------------------------------

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		numX=10
		result=func_exec(listA,listB)
		print(result)
		Expected Output : []

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[100,20,300,40,50,60,100]
		numX=20
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [100,20,300,40,50,60,100]

	Example :
		listA=[100,21,300,41,50,63,100]
		listB=[100,21,300,41,50,63,100]
		numX=10
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [100,300,50,100]


2. Write a function to take a dict, number X,Y as arguments. 
	If the SUM of (dict key + dict val) is PRIME and > sum of number (X+Y)
		: then add it to new dict. 
	Finally iterate and return the new dict.

	Example : 
			testDict={1:4,10:2,3:4,4:7,6:11,12:9}
			numX=2
			numY=10

			result=func_exec(testDict,numX,numY)
			print(result)
			Expected Output : {6:11}}

	Example : 
			testDict={1:4,10:2,3:4,4:7,6:11,12:9}
			numX=2
			numY=4

			result=func_exec(testDict,numX,numY)
			print(result)
			Expected Output : {3:4,6:11}}

3. Write a function to take a list argument. Find the element that has greatest length.

	Example :
		listA=["hello","world","science","maths","Python"]
		result=func_exec(listA)
		print(result)
		Expected Output : ["science"]
		Reason: length of science -> 7

	Example :
		listA=["hello","world","science","maths","Pythonics"]
		result=func_exec(listA)
		print(result)
		Expected Output : ["Pythonics"]
		Reason: length of Pythonics -> 9

4. Write a function to take 2 lists and an integer X. 
	From the listA find all elements that are >er numX. Append those elements to listB.
	Remove all duplicates from listB.
	Finally return listB.
   -------------------------------------------------------------------------------------

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		numX=100
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [1100,20,1300,40,50,160,1000,300]

	Example :
		listA=[100,20,300,40,50,60,100,200]
		listB=[1100,20,1300,40,50,160,1000]
		numX=150
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [1100,20,1300,40,50,160,1000,200,300]


	Example :
		listA=[100,20,300,40,50,60,100,200]
		listB=[1100,20,1300,40,50,160,250]
		numX=250
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [1100,20,1300,40,50,160,250]

5. Write a function to take a dict as an argument. 
	Find the key that has least value and return the key.

	Example : 
		testDict={1:4,10:100,3:90,4:40,6:80,12:200}
		result=func_exec(testDict)
		print(result)
		Expected Output : 1
		Reason: Output is 1 since 1 has value of 4 which is lesser than other values


	Example : 
		testDict={1:4,10:100,3:90,4:40,6:80,12:200,1000:3}
		result=func_exec(testDict)
		print(result)
		Expected Output : 1
		Reason: Output is 1000 since 1000 has value of 3 which is lesser than other values

6. Write a function to take a dict as argument. 
	If the dict-val is the divisible bydict-key then filter, add to new dict.
   Finally return the new dict.

	Example : 
			testDict={10:20, 3:30, 4:16,90:100,20:30,11:23,17:44,20:400}
			result=func_exec(testDict)
			print(result)
			Expected Output : {10:20,3:30,4:16,20:400}
			Reason: 
				20 is divisible by 10
				30 is divisible by 3
				16 is divisible by 4
				400 is divisible by 20
-----------------------------------------------------------------------------------------------------

Exercise Set 11:
----------------

For each of the sections below, write your own function and demonstrate.
In your tests folder, create seperate python files and execute.
You must write code, execute and practice each topic in-depth.
Monday you will have online coding round.

Lists
*****
	-	indexing
	-	slicing
	-	searching
	-	sorting
	-	append
	-	insert
	-	remove
	-	extend
	-	iteration
	-	deletion (Deleting the entire list)

Dicts
*****
	-	hashing
	-	searching
	-	sorting by keys
	-	sorting by values
	-	update values
	-	Add new keys
	-	Add new keys using dict.update({})
	-	iteration 
		- (Iterate and print key:values)

Loops
*****
	-	For Loops
	-	While Loop

Conditions
**********
	-	If
	-	If-else
	-	If-elif-else

Functions
**********
    -  With Args
    -  Without Args
    -  *args
    -  **kwargs
    -  Default Args

Objects
********
    - Mutables
    - Im-Mutables	
-----------------------------------------------------------------------------------------------------

Exercise Set 12:
----------------

1. Write a function to take 2 lists and integers numX,numY . 
	From the listA find all elements that are >er sum(numX+numY). Append those elements to listB.
	Remove all duplicates from listB.
	Finally sort and return listB.
   -------------------------------------------------------------------------------------

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		numX=100
		numY=10
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [20,40,50,160,300,1000,1100,1300]

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		numX=10
		numY=10
		result=func_exec(listA,listB)
		print(result)
		Expected Output : [20,40,50,60,100,160,300,1100,1300]

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		numX=300
		numY=100
		result=func_exec(listA,listB)
		print(result)
		Expected Output : []

2. Write a function to take a list argument. Find the element that has greatest length.

	Example :
		listA=["hello","world","science","maths","Python"]
		result=func_exec(listA)
		print(result)
		Expected Output : ["science"]
		Reason: length of science -> 7

	Example :
		listA=["hello","world","science","maths","Pythonics"]
		result=func_exec(listA)
		print(result)
		Expected Output : ["Pythonics"]
		Reason: length of Pythonics -> 9

	Example :
		listA=["hello","world","science","maths","Pythonics",1000]
		result=func_exec(listA)
		print(result)
		Expected Output : Raise exception since 1000 is an integer

3. Write a function to calculate the student's grade based on marks obtained in various subjects.
   There are 4 subjects Maths, Physics, Chemistry, CSE
   You need to find the sum of all of the marks obtained above and calcuate grade.
   Here's the table to calculcate the grade

   Note: 
   	1. You must use **kwargs
   	2. If the input score is >100 for any subject you must raise exception since max allowed score is 100 ONLY
   	3. If the input score is non-integer, you must raise exception since scores can be in integers ONLY
   ----------------------------

	   Total       Grade
	   ------      ------
	    400         A+
	    350-400		 A
	    300-350     B+
	    250-300     B
	    200-250     C
	    150-200  	 E
	    <150        F

	Example :
		result=func_exec(maths=100,physics=100,chemistry=100,cse=100)
		print(result)
		Expected Output : "A+"

	Example :
		result=func_exec(maths=100,physics=80,chemistry=100,cse=90)
		print(result)
		Expected Output : "A"

	Example :
		result=func_exec(maths=100,physics=50,chemistry=100,cse=90)
		print(result)
		Expected Output : "B+"

	Example :
		result=func_exec(maths=50,physics=50,chemistry=50,cse=50)
		print(result)
		Expected Output : "C"

	Example :
		result=func_exec(maths=50,physics=50,chemistry=50,cse=500)
		print(result)
		Expected Output : Raise Exception since cse score is 500, max allowed per subject is 100 ONLY

	Example :
		result=func_exec(maths=50,physics=50,chemistry=50,cse="100")
		print(result)
		Expected Output : Raise Exception since cse score is a string "100", scores can be integers ONLY


4. Write a function to take a number numX, numY followed by any number of integer arguments. 
	You need to find all numbers divisible by numX and numY
	Filter all the numbers from the list that are divisible numX and numY and add to new list.
	Finally return the new list.

	Note: You must use *args in your function implementation
	*********************************************************

	Example :
		numX=20
		numY=10
		result=func_exec(numX,20,40,50,60,80,90,100,70)
		print(result)
		Expected Output : [20,40,60,80,100]

	Example :
		numX=25
		numY=5		
		result=func_exec(numX,50,60,80,90,100,70)
		print(result)
		Expected Output : [50,100]

	Example :
		numX=7
		numY=12		
		result=func_exec(numX,20,40,50,70)
		print(result)
		Expected Output : []


5. Write a function to take 2 lists. Use zip function to iterate the list and pick values that
   are common at both indexes.

	Example :
		listA=[100,20,300,40,50,60,100]
		listB=[1100,20,1300,40,50,160,1000]
		result=func_exec(listA,listB)
		print(result)
		# 20 -> listA[1] == listB[1]
		# 40 -> listA[3] == listB[3]
		# 50 -> listA[4] == listB[4]
		Expected Output : [20,40,50]

	Example :
		listA=[1001,201,3001,401,501,601,1001]
		listB=[1100,20,1300,40,50,160,1000]
		result=func_exec(listA,listB)
		print(result)
		Expected Output : []

6. Write a function to take a dict as argument. Sort the dict by keys and return the dict.

	Example : 
			testDict={1:4,10:20,3:4,4:7,60:11,12:9}
			result=func_exec(testDict)
			print(result)
			Expected Output : {1:4,3:4,4:7,12:9,20:3,60:11}

7. Write a function to take a dict as argument. Sort the dict by values and return the dict.

	Example : 
			testDict={1:4,10:20,3:40,4:7,60:11,12:9}
			result=func_exec(testDict)
			print(result)
			Expected Output : {1:4,4:7,12:9,60:11,10:20,3:40}


8. Write a function to take a dict as argument. Find the key that has max value.

	Example : 
			testDict={1:4,10:20,3:40,4:7,60:11,12:9}
			result=func_exec(testDict)
			print(result)
			Expected Output : {3:40}
			Reason: Key "3" has value of "40" >er than other values


9. Write a function to calculate the employee hike based on appraisal rating.
   
   Note: 
   	1. You must use **kwargs
   	2. If the rating score is >100 for any employee you must raise exception since max allowed score is 100 ONLY
   	3. If the input score is non-integer, you must raise exception since scores can be in integers ONLY
   	4. Formula for new salary calculation:
   		new_salary= ((hike/100)*old_salary)+old_salary
   		Example:
   		---------
   			curr_salary=100000
   			hike=30
   			new_salary=((30/100)*100000)+100000
   			new_salary=130000

   			curr_salary=50000
   			hike=10
   			new_salary=((10/100)*50000)+50000
   			new_salary=55000

   ----------------------------------------------------------------------------------------------------------------

   Here's the table to calculcate the hike

	   Total       Hike%
	   ------      ------
	    100         30
	    90-100      24
	    80-90       17
	    70-80       12
	    60-70       8
	    50-60       4
	    <50         1

	Example :
		result=func_exec(rating=100,curr_salary=100000)
		print(result)
		Expected Output : {"hike":"30","new_salary":"130000"}

	Example :
		result=func_exec(rating=49,curr_salary=100000)
		print(result)
		Expected Output : {"hike":"1","new_salary":"101000"}

	Example :
		result=func_exec(rating=200,curr_salary=50000)
		print(result)
		Expected Output : Raise Exception since rating score is 200, max allowed rating score is 100 ONLY

	Example :
		result=func_exec(rating="100",curr_salary=50000)
		print(result)
		Expected Output : Raise Exception since rating score is a string "100", rating scores can be integers ONLY

-----------------------------------------------------------------------------------------------------
Note : For each program you need to have a separate python file. Maintain a copy both at your linux as well as windows machine.
-----------------------------------------------------------------------------------------------------


