# AIM :
   CI/CD Automation ~ Using Kubernetes build agents for Jenkins

# Section 1:
*************
# How to install Jenkins using docker? You must use jenkins docker image and run jenkins. 
. Pull the Jenkins image using docker from the docker hub.

# Step 1:
. To pull the image of jenkins
    docker pull jenkins/jenkins 

. To see if image is downloaded or not  
    docker images  (we can see our Jenkins image)

# Step 2:
# Now we can make our Jenkins container. 
. To run a container name jenkins using jenkins image   
    docker run --rm -d --name vudejenkins -p 8080:8080 -p 50000:50000 jenkins

. To see if container is running or not 
    docker ps 

# section 2:
*************
# How to integrate jenkins with bitbucket?

# Step 1:
. Create a Repo Using BitBucket

# Step 2:
# Install the Bitbucket plugin in Jenkins.
. Log in to the Jenkins server and go to Manage plugins.
. Then search for the BitBucket server integration plugin and tick the BitBucket plugin.
. Click the Install without restart button to install the plugin. 
. Now the BitBucket plugin is installed successfully.
. If you are using private BitBucket repo we need to add BitBucket credentials to Jenkins.
. If it is a public repo, then there is no need for the credentials.

# Section 3:
************
# How to run a sample build by committing code in bit-bucket and triggering Jenkins?

# Step 1:
# Create New Job in Jenkins and connect BitBucket Repo using credentials.
. Click the New Item to create a new Jenkins job.
. Then give a name for the Jenkins job. And click the FreeStyle Project. Then click the OK button to create a Jenkins job.
. Then go to the Source Code Management section and click the Git button.
. Give the Bitbucket repo in the Repository URL.
. Click the Add->Jenkins to pass the username and password of the Bitbucket. 
. Give Bitbucket username and password here and click the Add button.
. In the Build Trigger section, click the checkbox Build when a change is pushed to BitBucket. Click the Save button to save all the changes.
. Now the Bitbucket and Jenkins are connected.

# Step 2:
# Push code to Jenkins when new code is committed using BitBucket webhooks.
. BitBucket to push the code changes to the Jenkins server whenever a new code is committed to the repository.
. Go to the Webhooks section.Click the Add webhook button.
. Give a name for this hook and add your Jenkins URL in the URL input field.
. To test the integration, click the Build Now button in the Jenkins Job.

# Section 4:
*************
# How to integrate Jenkins with docker?
. Jenkins has a Docker plugin that enables communication with Docker hosts. 
. Select Manage Jenkins in the menu on the left side of the Jenkins dashboard.
. Click Manage Plugins in the Manage Jenkins window.
. Select the Available tab in the Plugin Manager window and type Docker in the search field.
.  Click the Download now and install after restart button.
. Once all the necessary plugin components download, now click on the restart Jenkins.

# Section 5:
************
# How to integrate Jenkins with K8s?
. Go to your Jenkins dashboard and click Manage Jenkins.
. Go to Manage Plugins. Search for kubernetes plugins and Install without restart button.
. Within the Jenkins dashboard, select a Job and then select Configure.Then add build step.
. To Select Deploy to Kubernetes, select the kubeconfig stored in Jenkins
. Go to Kubernetes cluod configuration (kubeconfig)).Enter the kubeconfig content directly
. Fill in the "Config Files" with the configuration file paths. 
. By checking "Enable Variable Substitution in Config
. Then provide the jenkins credentials like domin, kind, secret and Id
. Configure the Jenkins URL Details like jenkins url and pod lebels

# Section 6:
*************
# How to write a declarative jenkins pipeline?

# Declarative pipeline: 
. This is a new approach to writing the job as code.It makes the pipeline much easier to read and write.
. Declarative pipelines are more restricted with respect to their syntax.
. Declarative pipelines start with the pipeline keyword.
. Before creating the Pipeline job ensure that the Pipeline Plugin is available in your Jenkins.

# Step 1: 
  Pipeline:
  - All valid Declarative Pipelines must be enclosed within a pipeline block
 For example:

 pipeline {
        
    }

 - The top-level of the Pipeline must be a block, specifically: pipeline { }.
            
# Step 2 : 
 Agent:
 - where you want buil the job is called agent
 - The agent section specifies where the entire Pipeline, or a specific stage
 - The section must be defined at the top-level inside the pipeline block
 - Execute the Pipeline, or stage, on any available agent. For example: agent any

agent any {

}

# Step 3 : 
 Stages:    
 - Stages Containing a sequence of one or more stage directives
 - The stages section is where the bulk of the "work" described by a Pipeline will be located.  
 - At a minimum, it is recommended that stages contain at least one stage directive
 - For each discrete part of the continuous delivery process, such as Build, Test, and Deploy.

 stages { 
   stage('Example') {

        }
     }  

# Step 4 : 
 Steps:
 - The steps section defines a series of one or more steps to be executed in a given stage directive.
 - The steps section must contain one or more steps.

 steps {
    echo 'Hello World'
 }   

 # Section 7 :
 *************
# How to write a scripted jenkins pipeline?

# Scripted pipeline: 
. This is the traditional way of writing the pipeline job.
. It provides flexibility with respect to syntax. 
. Scripted pipelines start with the node keyword.
. Scripted pipeline genarally we are using groovy language

# Step 1 :
Node :
 - The first block to be defined is the node:
 - A node is a machine which is part of the Jenkins environment and is capable of executing a Pipeline.
   node {

  }    

# Step 2 :
 - The next required section is the stage
 - Each stage block specifies the tasks to be performed.
 - example- Build, Scm,Test and Deploy stages
   stage ('1'){            

    }

# STEP 3 :
 - A single task. Fundamentally, a step tells Jenkins what to do at a particular point/step in process
 - To execute the shell command make use the sh step
 - echo'hello world'

 # Section 8 :
 *************
# How run jenkins job inside of docker containers?

# Step 1 : 
.Once installed, head over to Jenkins Dashboard => Manage Jenkins =>Configure system

# Step 2 : 
. Under Configure System, there will be a section named cloud 
. Manage Jenkins => Manage Nodes and Clouds, Under docker you need to fill out the details
. Replace Docker URI with your docker host IP. 
. Test connection to test if Jenkins is able to connect to the Docker host.

# Step 3 : 
. Now, from Docker Agent Template, Add Docker template.
. fill in the details based on the the image    
. Labels - Identification for the docker host. It will be used in the Job configuration
. Name- Name of the docker template. Here we use the same name as label
. The image that you created for the slave. Then give Home folder for the user you have created.
. Credentials - add and enter the username and password that you have created for the docker image.
. There are additional configurations like registry authentication and container settings.
. You can also use JNLP-based slave agents. For this, the configurations need a little change
. Primarily the docker image name and the connect method
. if you want the workspace to be persistent, add a host volume path under container settings.

# Step 4 :
. Test Jenkins Build Inside a Docker container   
. configurations ready, we will test the docker agent plugin using a freestyle job.
. Create a freestyle job, select Restrict where this project can be run, select docker host
. Add a shell build step which echoes a simple Hello World
. If you have done all the configurations, builds the project.
. With help of console output we can find buils job details.

# Section 9 :
*************
# How run jenkins job inside of K8s PODS?

# Step 1:
. Go to Manage Jenkins => Manage Plugins, search for Kubernetes Plugin and install it.

# Step 2 : 
. Once installed, go to Manage Jenkins => Manage Node & Clouds, Add a new Cloud select Kubernetes.

# Step 3 : 
. Jenkins server running inside the same Kubernetes cluster
. we have inside the Kubernetes cluster with a service account to deploy the agent pods, 
. we don't have to mention the Kubernetes URL or certificate key.

# Step 4 :
. we have to need to create one namespace and service account
    kubectl create namespace <NS-NAME>
    kubectl create serviceaccount <SA-NAME> -n <NS-NAME>

# Step 5 :
. Add button under credentials and create a credential type Secret text. 
. Enter the service account token in the secret box and add other details as description
. The kubernetes cloud configuration like kubernetes url, server certificates and namespace credentials

# Step 6 : 
# Create POD and Container Template    
. Next, you need to add the POD template with the details, as Name, namespace, labels, container details

# Step 7 : 
. Go to Jenkins home => New Item and create a freestyle project.
. Select Restrict where this project can be run and  label we assigned to the pod template. 
. This way, it knows which pod template to use for the agent container.
. Add a shell build step with an echo command to validate the job as "echo hello world"
. Now, save the job configuration and click Build Now

# Examples :
************
# Example 1 :
. Declarative Pipeline Single Step :

    pipeline {
        agent any
        stages {
            stage('Example') {
             steps { 
                 echo 'Hello World'
                }
            }
        }
    }

# Example 2 :
. Scripted pipeline in single step :

    node{
        stage('hello'){
            echo "hello world"
        }
    }









