apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo
  namespace: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: vude-mongo-c
          image: mongo:4.4.6
          env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: vudeadmin
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: vudeshardis001
          - name: MONGO_INITDB_DATABASE
            value: admin
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 27017
              name: httpm
              protocol: TCP
          volumeMounts:
             - mountPath: /data/db
               name: vude-mongo-v
      volumes:
        - name: vude-mongo-v
          hostPath:
             path: /opt/assignments/

**************************************************************************************
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-standalone
  namespace: mongodb
spec:
  serviceName: database
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        selector: mongodb-standalone
    spec:
      containers:
      - name: mongodb-standalone
        image: mongo:4.0.8
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: admin
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: password
      nodeSelector:
        kubernetes.io/hostname: mongodb-node

***********************************************************************************************
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongo
  name: mongo-nodeport-svc
  namespace: mongodb
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
    nodePort: 31000
  selector:
    app: mongo
  type: NodePort

*********************************************************************************************
Shell
******
#!/bin/bash
# Clean-up and create namespace

function namespace() {

echo "Clean-up & create a new namespace :: $1"
kubectl delete all --all -n $1
kubectl delete pvc --all -n $1
kubectl delete services --all -n $1
kubectl create ns $1

echo " "

}
function main() {

 namespace $1

}

main $1
****************************************************************
#!/bin/bash
# Bring up Deployments

function deployment() {

   echo "Bring up Deployment => START"

   kubectl apply -f /opt/assignments/mongo/specs/deployments/start.yml

   echo "Deployment ACTIVE => DONE"

}

function svc() {

   echo "Bring up Service => START"

   kubectl apply -f /opt/assignments/mongo/specs/svc/start.yml

   echo "Service ACTIVE  => DONE"

}

function main() {

#  namespace $1

  deployment

  svc

}

# Arguments :: $1 = namespace(mongodb)

main $1


